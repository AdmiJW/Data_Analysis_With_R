print(x)
}
while (x) {
print(x)
--x
}
x = x-1
while (x) {
print(x)
x = x-1
}
sum <- function(a,b) {
return(a + b)
}
sum(12, 34)
data
data = data.frame(x = 1:10, y = 10:100)
data
df = data.frame(x = 1:10, y = 10:100)
df
df = data.frame(x = 1:10, y = 10:100)
df
df = data.frame(x = 1:10, y = 10:100)
df = data.frame(x = 1:10, y = 10:100:10)
df = data.frame(x = 1:10, y = seq(10,100,10))
df
write.csv(df, "./exampledata.csv")
df = read.csv("./exampledata.csv")
df
df = data.frame(x = 1:10, y = seq(10,100,10))
df
write.csv(df, "./exampledata.csv")
df = read.csv("./exampledata.csv")
df
# Let's plot the function with options
plot(dnorm, -3, +3,
col='#cc0000',
lwd='5',                              #Line width
main='Standard Normal Distribution',
xlab='z-scores',
ylab='density'
)
# Load data
?mtcars
head(mtcars)
# Bar chart. Use barplot() function
barplot(mtcars$cyl)
# Instead, we need to create a table with frequencies
# for each category
cylinders <- table(mtcars$cyl)
barplot(cylinders)
plot(cylinders)
# Once again, we use iris dataset
head(iris)
# Once again, we use iris dataset
?iris
# Let's plot easily using hist() function
hist(iris$Sepal.Length)
hist(iris$Sepal.Width)
hist(iris$Petal.Length)
hist(iris$Petal.Width)
(iris$Sepal.Width)
hist(iris$Sepal.Width)
hist(iris$Petal.Length)
hist(iris$Petal.Width)
setosaOnly
# First, let's see how can we filter out certain rows
setosaOnly = iris[iris$Species == 'setosa']
# First, let's see how can we filter out certain rows
setosaOnly = iris[[iris$Species == 'setosa']]
# First, let's see how can we filter out certain rows
setosaOnly = iris[][iris$Species == 'setosa']
# First, let's see how can we filter out certain rows
setosaOnly = iris[][iris$Species == 'setosa']
# First, let's see how can we filter out certain rows
setosaOnly = iris$Sepal.Width[iris$Species == 'setosa']
setosaOnly
# First, let's see how can we filter out certain rows
setosaOnly = iris$[iris$Species == 'setosa']
# First, let's see how can we filter out certain rows
setosaOnly = iris[iris$Species == 'setosa']
# First, let's see how can we filter out certain rows
setosaOnly = iris[iris$Species == 'setosa',]
setosaOnly
# We are ready to go plotting some histograms
hist(iris$Petal.Width[ iris$Species == 'setosa'],
xlim = c(0,3),     # Show range 0 to 3 only
breaks = 9,        # How many bars
main = "Petal Width for Setosa",
xlab = "",
col = "red"
)
# Petal Width for Versicolor
hist(iris$Petal.Width[ iris$Species == 'versicolor' ],
xlim = c(0,3),
breaks = 9,
main = 'Petal Width for Setosa',
xlab = '',
col = 'purple'
)
# Petal Width for Virginica
hist(iris$Petal.Width[ iris$Species == 'virginica'],
xlim = c(0,3),
breaks = 9,
main = 'Petal Width for Virginica',
xlab = '',
col = 'blue'
)
# Histogram by Group (By each flower species)
par(mfrow = c(3,1) )  # Plot the graph in 3 rows, 1 column
# We are ready to go plotting some histograms
# Petal Width for Setosa
hist(iris$Petal.Width[ iris$Species == 'setosa'],
xlim = c(0,3),     # Show range 0 to 3 only
breaks = 9,        # How many bars
main = "Petal Width for Setosa",
xlab = "",
col = "red"
)
# Petal Width for Versicolor
hist(iris$Petal.Width[ iris$Species == 'versicolor' ],
xlim = c(0,3),
breaks = 9,
main = 'Petal Width for Versicolor',
xlab = '',
col = 'purple'
)
# Petal Width for Virginica
hist(iris$Petal.Width[ iris$Species == 'virginica'],
xlim = c(0,3),
breaks = 9,
main = 'Petal Width for Virginica',
xlab = '',
col = 'blue'
)
# Reset the figure plotting to be 1 row 1 column
par(mfrow = c(1,1) )
library(datasets)
?mtcars
head(mtcars)
# Let's check for univariate distributions first
hist(mtcars$wt)
hist(mtcars$mpg)
# Let's plot a X-Y plot now:
plot(mtcars$wt, mtcars$mpg)
# Customize our plot, especially colors
plot(mtcars$wt, mtcars$mpg,
pch = 19,
cex = 1.5
col = "cc0000",
main = 'MPG as a Function of Weight of Cars',
xlab = 'Weight (in 1000 pounds)',
ylab = 'MPG'
)
# Customize our plot, especially colors
plot(mtcars$wt, mtcars$mpg,
pch = 19,
cex = 1.5
col = "cc0000",
main = 'MPG as a Function of Weight of Cars',
xlab = 'Weight (in 1000 pounds)',
ylab = 'MPG'
)
# Customize our plot, especially colors
plot(mtcars$wt, mtcars$mpg,
pch = 19,
cex = 1.5
col = "cc0000",
main = 'MPG as a Function of Weight of Cars',
xlab = 'Weight (in 1000 pounds)',
ylab = 'MPG'
)
plot(mtcars$wt, mtcars$mpg,
pch = 19,
cex = 1.5
col = "cc0000",
main = 'MPG as a Function of Weight of Cars',
xlab = 'Weight (in 1000 pounds)',
ylab = 'MPG'
)
# Customize our plot, especially colors
plot(mtcars$wt, mtcars$mpg,
pch = 19,
cex = 1.5
col = "cc0000",
main = 'MPG as a Function of Weight of Cars',
xlab = 'Weight (in 1000 pounds)',
ylab = 'MPG'
)
# Customize our plot, especially colors
plot(mtcars$wt, mtcars$mpg,
pch = 19,
cex = 1.5
col = "cc0000",
main = 'MPG as a Function of Weight of Cars',
xlab = 'Weight (in 1000 pounds',
ylab = 'MPG'
)
# Customize our plot, especially colors
plot(mtcars$wt, mtcars$mpg,
pch = 19,
cex = 1.5
col = "cc0000",
main = 'MPG as a Function of Weight of Cars',
xlab = 'Weight in 1000 pounds',
ylab = 'MPG'
)
# Customize our plot, especially colors
plot(mtcars$wt, mtcars$mpg,
pch = 19,
cex = 1.5,
col = "cc0000",
main = 'MPG as a Function of Weight of Cars',
xlab = 'Weight (in 1000 pounds)',
ylab = 'MPG'
)
# Customize our plot, especially colors
plot(mtcars$wt, mtcars$mpg,
pch = 19,
cex = 1.5,
col = "cc0000",
main = 'MPG as a Function of Weight of Cars',
xlab = 'Weight (in 1000 pounds)',
ylab = 'MPG'
)
# Customize our plot, especially colors
plot(mtcars$wt, mtcars$mpg,
pch = 19,
cex = 1.5,
col = "#cc0000",
main = 'MPG as a Function of Weight of Cars',
xlab = 'Weight (in 1000 pounds)',
ylab = 'MPG'
)
# Customize our plot, especially colors
plot(mtcars$wt, mtcars$mpg,
pch = 19,
cex = 1.5,
col = "#cc0000",
main = 'MPG as a Function of Weight of Cars',
xlab = 'Weight (in 1000 pounds)',
ylab = 'MPG'
)
head(lynx)
# Let's use new data set, 'Lynx'
?lynx
# Histogram
hist(lynx)
head(lynx)
# Let's use new data set, 'Lynx'. It is a time series, and it starts at 1821 to 1934
?lynx
# Add some options to Histogram
hist(lynx,
breaks = 14,             # Suggest 14 'bins' (bars)
freq = FALSE,            # Show density instead of frequency
col = 'thisle1',
main = paste("Histogram of Annual Canadian Lynx",
"Trappings", "1821-1934"),
xlab = 'Number of Lynx Trapped'
)
# Add some options to Histogram
hist(lynx,
breaks = 14,             # Suggest 14 'bins' (bars)
freq = FALSE,            # Show density instead of frequency
col = 'thisle1',
main = paste("Histogram of Annual Canadian Lynx",   # paste() concatenate strings
"Trappings", "1821-1934"),
xlab = 'Number of Lynx Trapped'
)
# Add some options to Histogram
hist(lynx,
breaks = 14,             # Suggest 14 'bins' (bars)
freq = FALSE,            # Show density instead of frequency
col = 'thistle1',
main = paste("Histogram of Annual Canadian Lynx",   # paste() concatenate strings
"Trappings", "1821-1934"),
xlab = 'Number of Lynx Trapped'
)
# Now, in addition to the above histogram, let's put a normal distribution on top!
curve(dnorm(x, mean=mean(lynx), sd=sd(lynx)),
col = 'thistle4',
lwd = 2,
add = TRUE          # This 'add' asks is to superimpose previous drawn graph
)
lines( density(lynx, adjust=3), col='purple', lwd=2 )
# Also, add Kernel Density Estimators
lines( density(lynx), col='blue', lwd=2 )
lines( density(lynx, adjust=3), col='purple', lwd=2 )
?lines
# Lastly, add a rug plot
rug( lynx, lwd=2, col='grey')
library(datasets)
# Start off by summary() function
summary(iris)
# Summarize columns
summary(iris$Species)
summary(iris$Sepal.Length)   # Quantitative
library(psych)
pacman::p_load(psych)
library(psych)
p_help(psych)
pacman::p_help(psych)
pacman::p_help(psych)
?psych
p_help()
# describe() only works on quantitative data
describe(iris$Sepal.Length)
describe(iris)
require(datasets)
require(datasets)
head(iris)
# Data
hist(iris$Petal.Length)
summary(iris$Petal.Length)
summary(iris$Species)
summary(iris$Species)
hist(iris$Petal.Length[ versicolor ], main='Petal Length: Versicolor')
# Versicolor
versicolor = iris$Species == 'versicolor'
hist(iris$Petal.Length[ versicolor ], main='Petal Length: Versicolor')
hist( iris$Petal.Length[ setosa ], main='Petal Length: Setosa')
setosa = iris$Species == 'setosa'
hist( iris$Petal.Length[ setosa ], main='Petal Length: Setosa')
hist(iris$Petal.Length[ shortpetals ], main = 'Petal Length < 2')
# Short petals only
shortpetals = iris$Petal.Length < 2
hist(iris$Petal.Length[ shortpetals ], main = 'Petal Length < 2')
hist(iris$Petal.Length[ virginica & shortpetals ],
main ='Petal Length: Short Virginica')
# Virginica with short petals
virginica = iris$Species == 'virginica'
shortpetals = iris$Petal.Length < 5.5
hist(iris$Petal.Length[ virginica & shortpetals ],
main ='Petal Length: Short Virginica')
hist(iris$Petal.Length[ virginica & ~shortpetals ],
main ='Petal Length: Short Virginica')
hist(iris$Petal.Length[ virginica | shortpetals ],
main ='Petal Length: Short Virginica')
hist(iris$Petal.Length[ virginica & shortpetals ],
main ='Petal Length: Short Virginica')
setosa.only = iris[ iris$Species == 'setosa', ]
describe(setosa.only)
describe(setosa.only$Species)
summary(setosa.only$Species)
# To select from data frame, it must have [row, column]
# if we leave blank, then it gonna select all
# that's why we leave a comma after row selector
setosa.only <- iris[ iris$Species == 'setosa', ]
summary(setosa.only$Species)
rm(list = ls() )
named_vector = c(30, 70, 90, 10, 20)
names(named_vector) <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
named_vector
odds_num <- c(1,3,5)
even_num <- c(2,4,6)
odds_num + even_num
sum( c(1,2,3) )
access_me[1]
s_me <- c(1,2,3)
names(access_me) <- c("One", "Two", "Three")
access_me[1]
# Accessing a vector is no more than simply using square brackets and indices
access_me <- c(1,2,3)
ss_me <- c(1,2,3)
names(access_me) <- c("One", "Two", "Three")
access_me
access_me <- c(1,2,3)
names(access_me) <- c("One", "Two", "Three")
access_me[1]
access_me["One"]
access_me["Three"]
access_me[ c(1,3) ]
access_me[ 1:3 ]
access_me[ 1:2 ]
mean( c(1,2,3) )
i_want_positive <- c(-1,1,-2,3)
filter <- i_want_positive > 0
filter
i_want_positive[ filter ]
one_to_nine <- matrix(1:9, byrow=TRUE, nrow = 3)
one_to_nine
dim(m)
dim(one_to_nine)
one_to_nine <- matrix(1:9, byrow=TRUE, nrow=3 )
rownames(one_to_nine) <- c("Row 1", "Row 2", "Row 3")
colnames(one_to_nine) <- c("Col 1", "Col 2", "Col 3")
one_to_nine
one_to_nine <- matrix(1:9, byrow=TRUE, nrow=3 )
rowSums(one_to_nine)
colSums(one_to_nine)
col1 <- c(1,2,3)
col2 <- c(4,5,6)
cbind(col1, col2)
v1 <- c(1,2,3)
v2 <- c(4,5,6)
cbind(v1, v2)
rbind(v1, v2)
one_to_nine[ 1:2, 3]
one_to_nine[ 1,]
one_to_nine[ 1]
one_to_nine[ 1, ]
matrix1 <- matrix(1:4, nrow=2 )
matrix2 <- matrix(2:6, nrow=2 )
matrix1
matrix2
matrix1 * matrix2
matrix2 <- matrix(2:5, nrow=2 )
matrix1 <- matrix(1:4, nrow=2 )
matrix2 <- matrix(2:5, nrow=2 )
matrix1
matrix2
matrix1 * matrix2
animals <- c("Cat", "Dog", "Bird", "Cat", "Dog")
animal_factor <- factor(animals)
animal_factor
levels <- c("High", "Low", "Medium", "Low", "High")
levels_factor <- factor(levels, order=TRUE, levels=c("Low", "Medium", "High") )
levels_factor
genders_factor <- factor( c("M", "F", "F", "F", "M", "M") )
# Identify the ordering first before assigning!
genders_factor
levels(genders_factor) <- c("Female", "Male")
genders_factor
# Now we can interpret the categorical variable by doing summary() function
genders_factor <- factor( c("M", "F", "M", "F", "F", "M", "F", "F", "F", "M", "F") )
summary(genders_factor)
ratings_of_movie <- factor( c("high", "low", "medium", "low", "medium"), ordered=TRUE, levels=c("low", "medium", "high") )
ratings_of_movie
# Is 1st movie better than 3rd?
ratings_of_movie[1] > ratings_of_movie[3]
plot(x, y)
x <- c(8,20,20,30,35,40,50,55,65)
y <- c(22.8, 17.1, 21.1, 16.1, 13.4, 12.4, 11.4, 9.7, 6.8)
plot(x, y)
xy <- x * y
x2 <- x * x
x
y
xy
x2
sum(y)
sum(xy)
sum(x2)
lm(y~x)
xs <- c(2166, 751, 2422, 224, 3917, 2866, 1698, 1046, 1108, 405)
xlb <- c(2, 3.5, 3.6, 4.7, 1.7, 2.3, 3.1 ,4.8, 7.6, 17.2)
y <- c(10.6, 2.6, 30.5, 1.8, 20, 8, 10, 6.7, 5.8, 4.5)
xs
xlb
y
xsy <- xs * y
xlby <- xlb * y
xs2 <- xs * xs
xlb2 <- xlb * xlb
xsy
xlby
xs2
xlb2
y2
y2 <- y * y
y2
sum(xs, xlb)
sum(xs)
sum(xlb)
sum(y)
sum(xsy)
sum(xlby)
sum(xs2)
sum(xlb2)
sum(y2)
cor(xs, y)
cor(xlb, y)
lm(xs~y)
lm(y~xs)
x <- c(23,14,14,0,17,20,20,15,21)
y <- c(43, 59, 48, 77, 50, 52, 46, 51, 51)
xy <- x * y
x2 <- x * x
y2 <- y * y
x
y
xy
x2
y2
sum(x)
sum(y)
sum(xy)
sum(x2)
sum(y2)
plot(x,y)
cor(x, y)
p <- c(35, 23, 47,17,10,43, 9, 6, 28)
m <- c(30, 33, 45, 23, 8, 49, 12, 4, 31)
sort(p)
sort(p, decreasing=TRUE)
sort(m, decreasing=TRUE)
x <- c(0.27, 1.41, 2.19, 2.83, 2.19, 1.81, 0.85, 3.05)
y <- c(2,3,3,6,4,2,1,5)
xy <- x * y
x2 <- x * x
y2 <- y * y
x
y
xy
x2
y2
sum(x)
sum(y)
sum(xy)
sum(x2)
sum(y2)
cor(x,y)
