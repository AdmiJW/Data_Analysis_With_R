lwd='5',                              #Line width
main='Standard Normal Distribution',
xlab='z-scores',
ylab='density'
)
plot(dnrom, -3, +3,
col='##cc0000',
lwd='5',                              #Line width
main='Standard Normal Distribution',
xlab='z-scores',
ylab='density'
)
plot(dnrom, -3, +3,
col='##cc0000',
lwd='5',                              #Line width
main='Standard Normal Distribution',
xlab='z-scores',
ylab='density'
)
plot(dnrom, -3, +3,
col='##cc0000',
lwd='5',                              #Line width
main='Standard Normal Distribution',
xlab='z-scores',
ylab='density'
)
plot(dnrom, -3, +3,
col='##cc0000',
lwd='5',                              #Line width
main='Standard Normal Distribution',
xlab='z-scores',
ylab='density'
)
plot(dnrom, -3, +3,
col='##cc0000',
lwd='5',                              #Line width
main='Standard Normal Distribution',
xlab='z-scores',
ylab='density'
)
# Let's plot the function with options
plot(dnorm, -3, +3,
col='##cc0000',
lwd='5',                              #Line width
main='Standard Normal Distribution',
xlab='z-scores',
ylab='density'
)
# Let's plot the function with options
plot(dnorm, -3, +3,
col='#cc0000',
lwd='5',                              #Line width
main='Standard Normal Distribution',
xlab='z-scores',
ylab='density'
)
# To update packages, use
#     update.packages()
update.packages(pacman)
# To update packages, use
#     update.packages()
update.packages('pacman')
s = c(s, "Daniel", 'Ziara')
s
s = c("Alex", "Sarah", "Bill")
s
# To work with vectors, use typeof(), length(), class(), str()...
typeof(s)
length(s)
class(s)
str(s)
# Except from initializing a vector, c() can extend a vector, too
s = c(s, "Daniel", 'Ziara')
s
series <- 1:10
series
series <- seq(10)
series
series <- seq(from=1, to=10, by=0.5)
series
series[1]
series[0]
x <- c(Inf, NaN, NA)
x
# To parse a datatype, use 'as.<class_name>()' function
as.numeric("123")
as.string(12F)
as.string(12)
as.character(12)
as.character(12L)
as.character(1:10)
length("ABDASHU")
nchar("ABDASHU")
nchar("hello")
length("hello")
m <- matrix(nrow = 2, ncol = 2)
m
m <- matrix(nrow = 2, ncol = 2)
m
dim(m)
fours <- matrix(
c(4,4,4,4),
nrow=2,
ncol=2
)
fours
fours <- matrix(
c(4,4,4,4,4,4),
nrow=3,
ncol=2
)
fours
m <- matrix(c(1,2,3,4,5,6) )
m
m <- matrix(c(1,2,3,4,5,6) )
dim(m) <- c(2,3)
m
df = data.frame(id = letters[1:10], x = 1:10, y = 11:20 )
df
head(df)
tail(df)
dim(df)
nrow(df)
ncol(df)
str(df)
names(df)
head(df)
df.x
df$x
# To access a column, use dollar sign
df$id
# To access a row, use square bracket
df[1]
# To access a row, use square bracket
df[[1]
# To access a row, use square bracket
df[[1]]
# To access a row, use square bracket
entry(df, 1)
df[[id]]
df[['id']]
# To access a row, use
df[1,3]
# To access a row, use
df[1,:]
# To access a row, use
df[1,]
# if else
if (5 >= 1) {
print("5 is greater")
} else {
print("1 is greater")
}
# if else
if (5 >= 8) {
print("5 is greater")
} else {
print("1 is greater")
}
print(x)
# For loop
for (x in 1:10) {
print(x)
}
while (x) {
print(x)
--x
}
x = x-1
while (x) {
print(x)
x = x-1
}
sum <- function(a,b) {
return(a + b)
}
sum(12, 34)
data
data = data.frame(x = 1:10, y = 10:100)
data
df = data.frame(x = 1:10, y = 10:100)
df
df = data.frame(x = 1:10, y = 10:100)
df
df = data.frame(x = 1:10, y = 10:100)
df = data.frame(x = 1:10, y = 10:100:10)
df = data.frame(x = 1:10, y = seq(10,100,10))
df
write.csv(df, "./exampledata.csv")
df = read.csv("./exampledata.csv")
df
df = data.frame(x = 1:10, y = seq(10,100,10))
df
write.csv(df, "./exampledata.csv")
df = read.csv("./exampledata.csv")
df
# Let's plot the function with options
plot(dnorm, -3, +3,
col='#cc0000',
lwd='5',                              #Line width
main='Standard Normal Distribution',
xlab='z-scores',
ylab='density'
)
# Load data
?mtcars
head(mtcars)
# Bar chart. Use barplot() function
barplot(mtcars$cyl)
# Instead, we need to create a table with frequencies
# for each category
cylinders <- table(mtcars$cyl)
barplot(cylinders)
plot(cylinders)
# Once again, we use iris dataset
head(iris)
# Once again, we use iris dataset
?iris
# Let's plot easily using hist() function
hist(iris$Sepal.Length)
hist(iris$Sepal.Width)
hist(iris$Petal.Length)
hist(iris$Petal.Width)
(iris$Sepal.Width)
hist(iris$Sepal.Width)
hist(iris$Petal.Length)
hist(iris$Petal.Width)
setosaOnly
# First, let's see how can we filter out certain rows
setosaOnly = iris[iris$Species == 'setosa']
# First, let's see how can we filter out certain rows
setosaOnly = iris[[iris$Species == 'setosa']]
# First, let's see how can we filter out certain rows
setosaOnly = iris[][iris$Species == 'setosa']
# First, let's see how can we filter out certain rows
setosaOnly = iris[][iris$Species == 'setosa']
# First, let's see how can we filter out certain rows
setosaOnly = iris$Sepal.Width[iris$Species == 'setosa']
setosaOnly
# First, let's see how can we filter out certain rows
setosaOnly = iris$[iris$Species == 'setosa']
# First, let's see how can we filter out certain rows
setosaOnly = iris[iris$Species == 'setosa']
# First, let's see how can we filter out certain rows
setosaOnly = iris[iris$Species == 'setosa',]
setosaOnly
# We are ready to go plotting some histograms
hist(iris$Petal.Width[ iris$Species == 'setosa'],
xlim = c(0,3),     # Show range 0 to 3 only
breaks = 9,        # How many bars
main = "Petal Width for Setosa",
xlab = "",
col = "red"
)
# Petal Width for Versicolor
hist(iris$Petal.Width[ iris$Species == 'versicolor' ],
xlim = c(0,3),
breaks = 9,
main = 'Petal Width for Setosa',
xlab = '',
col = 'purple'
)
# Petal Width for Virginica
hist(iris$Petal.Width[ iris$Species == 'virginica'],
xlim = c(0,3),
breaks = 9,
main = 'Petal Width for Virginica',
xlab = '',
col = 'blue'
)
# Histogram by Group (By each flower species)
par(mfrow = c(3,1) )  # Plot the graph in 3 rows, 1 column
# We are ready to go plotting some histograms
# Petal Width for Setosa
hist(iris$Petal.Width[ iris$Species == 'setosa'],
xlim = c(0,3),     # Show range 0 to 3 only
breaks = 9,        # How many bars
main = "Petal Width for Setosa",
xlab = "",
col = "red"
)
# Petal Width for Versicolor
hist(iris$Petal.Width[ iris$Species == 'versicolor' ],
xlim = c(0,3),
breaks = 9,
main = 'Petal Width for Versicolor',
xlab = '',
col = 'purple'
)
# Petal Width for Virginica
hist(iris$Petal.Width[ iris$Species == 'virginica'],
xlim = c(0,3),
breaks = 9,
main = 'Petal Width for Virginica',
xlab = '',
col = 'blue'
)
# Reset the figure plotting to be 1 row 1 column
par(mfrow = c(1,1) )
library(datasets)
?mtcars
head(mtcars)
# Let's check for univariate distributions first
hist(mtcars$wt)
hist(mtcars$mpg)
# Let's plot a X-Y plot now:
plot(mtcars$wt, mtcars$mpg)
# Customize our plot, especially colors
plot(mtcars$wt, mtcars$mpg,
pch = 19,
cex = 1.5
col = "cc0000",
main = 'MPG as a Function of Weight of Cars',
xlab = 'Weight (in 1000 pounds)',
ylab = 'MPG'
)
# Customize our plot, especially colors
plot(mtcars$wt, mtcars$mpg,
pch = 19,
cex = 1.5
col = "cc0000",
main = 'MPG as a Function of Weight of Cars',
xlab = 'Weight (in 1000 pounds)',
ylab = 'MPG'
)
# Customize our plot, especially colors
plot(mtcars$wt, mtcars$mpg,
pch = 19,
cex = 1.5
col = "cc0000",
main = 'MPG as a Function of Weight of Cars',
xlab = 'Weight (in 1000 pounds)',
ylab = 'MPG'
)
plot(mtcars$wt, mtcars$mpg,
pch = 19,
cex = 1.5
col = "cc0000",
main = 'MPG as a Function of Weight of Cars',
xlab = 'Weight (in 1000 pounds)',
ylab = 'MPG'
)
# Customize our plot, especially colors
plot(mtcars$wt, mtcars$mpg,
pch = 19,
cex = 1.5
col = "cc0000",
main = 'MPG as a Function of Weight of Cars',
xlab = 'Weight (in 1000 pounds)',
ylab = 'MPG'
)
# Customize our plot, especially colors
plot(mtcars$wt, mtcars$mpg,
pch = 19,
cex = 1.5
col = "cc0000",
main = 'MPG as a Function of Weight of Cars',
xlab = 'Weight (in 1000 pounds',
ylab = 'MPG'
)
# Customize our plot, especially colors
plot(mtcars$wt, mtcars$mpg,
pch = 19,
cex = 1.5
col = "cc0000",
main = 'MPG as a Function of Weight of Cars',
xlab = 'Weight in 1000 pounds',
ylab = 'MPG'
)
# Customize our plot, especially colors
plot(mtcars$wt, mtcars$mpg,
pch = 19,
cex = 1.5,
col = "cc0000",
main = 'MPG as a Function of Weight of Cars',
xlab = 'Weight (in 1000 pounds)',
ylab = 'MPG'
)
# Customize our plot, especially colors
plot(mtcars$wt, mtcars$mpg,
pch = 19,
cex = 1.5,
col = "cc0000",
main = 'MPG as a Function of Weight of Cars',
xlab = 'Weight (in 1000 pounds)',
ylab = 'MPG'
)
# Customize our plot, especially colors
plot(mtcars$wt, mtcars$mpg,
pch = 19,
cex = 1.5,
col = "#cc0000",
main = 'MPG as a Function of Weight of Cars',
xlab = 'Weight (in 1000 pounds)',
ylab = 'MPG'
)
# Customize our plot, especially colors
plot(mtcars$wt, mtcars$mpg,
pch = 19,
cex = 1.5,
col = "#cc0000",
main = 'MPG as a Function of Weight of Cars',
xlab = 'Weight (in 1000 pounds)',
ylab = 'MPG'
)
head(lynx)
# Let's use new data set, 'Lynx'
?lynx
# Histogram
hist(lynx)
head(lynx)
# Let's use new data set, 'Lynx'. It is a time series, and it starts at 1821 to 1934
?lynx
# Add some options to Histogram
hist(lynx,
breaks = 14,             # Suggest 14 'bins' (bars)
freq = FALSE,            # Show density instead of frequency
col = 'thisle1',
main = paste("Histogram of Annual Canadian Lynx",
"Trappings", "1821-1934"),
xlab = 'Number of Lynx Trapped'
)
# Add some options to Histogram
hist(lynx,
breaks = 14,             # Suggest 14 'bins' (bars)
freq = FALSE,            # Show density instead of frequency
col = 'thisle1',
main = paste("Histogram of Annual Canadian Lynx",   # paste() concatenate strings
"Trappings", "1821-1934"),
xlab = 'Number of Lynx Trapped'
)
# Add some options to Histogram
hist(lynx,
breaks = 14,             # Suggest 14 'bins' (bars)
freq = FALSE,            # Show density instead of frequency
col = 'thistle1',
main = paste("Histogram of Annual Canadian Lynx",   # paste() concatenate strings
"Trappings", "1821-1934"),
xlab = 'Number of Lynx Trapped'
)
# Now, in addition to the above histogram, let's put a normal distribution on top!
curve(dnorm(x, mean=mean(lynx), sd=sd(lynx)),
col = 'thistle4',
lwd = 2,
add = TRUE          # This 'add' asks is to superimpose previous drawn graph
)
lines( density(lynx, adjust=3), col='purple', lwd=2 )
# Also, add Kernel Density Estimators
lines( density(lynx), col='blue', lwd=2 )
lines( density(lynx, adjust=3), col='purple', lwd=2 )
?lines
# Lastly, add a rug plot
rug( lynx, lwd=2, col='grey')
library(datasets)
# Start off by summary() function
summary(iris)
# Summarize columns
summary(iris$Species)
summary(iris$Sepal.Length)   # Quantitative
library(psych)
pacman::p_load(psych)
library(psych)
p_help(psych)
pacman::p_help(psych)
pacman::p_help(psych)
?psych
p_help()
# describe() only works on quantitative data
describe(iris$Sepal.Length)
describe(iris)
require(datasets)
require(datasets)
head(iris)
# Data
hist(iris$Petal.Length)
summary(iris$Petal.Length)
summary(iris$Species)
summary(iris$Species)
hist(iris$Petal.Length[ versicolor ], main='Petal Length: Versicolor')
# Versicolor
versicolor = iris$Species == 'versicolor'
hist(iris$Petal.Length[ versicolor ], main='Petal Length: Versicolor')
hist( iris$Petal.Length[ setosa ], main='Petal Length: Setosa')
setosa = iris$Species == 'setosa'
hist( iris$Petal.Length[ setosa ], main='Petal Length: Setosa')
hist(iris$Petal.Length[ shortpetals ], main = 'Petal Length < 2')
# Short petals only
shortpetals = iris$Petal.Length < 2
hist(iris$Petal.Length[ shortpetals ], main = 'Petal Length < 2')
hist(iris$Petal.Length[ virginica & shortpetals ],
main ='Petal Length: Short Virginica')
# Virginica with short petals
virginica = iris$Species == 'virginica'
shortpetals = iris$Petal.Length < 5.5
hist(iris$Petal.Length[ virginica & shortpetals ],
main ='Petal Length: Short Virginica')
hist(iris$Petal.Length[ virginica & ~shortpetals ],
main ='Petal Length: Short Virginica')
hist(iris$Petal.Length[ virginica | shortpetals ],
main ='Petal Length: Short Virginica')
hist(iris$Petal.Length[ virginica & shortpetals ],
main ='Petal Length: Short Virginica')
setosa.only = iris[ iris$Species == 'setosa', ]
describe(setosa.only)
describe(setosa.only$Species)
summary(setosa.only$Species)
# To select from data frame, it must have [row, column]
# if we leave blank, then it gonna select all
# that's why we leave a comma after row selector
setosa.only <- iris[ iris$Species == 'setosa', ]
summary(setosa.only$Species)
rm(list = ls() )
